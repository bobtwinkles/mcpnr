ifndef MODULE_NAME
  $(error Common module included without setting MODULE_NAME)
endif

MODULE_TECHMAPPED = $(MODULE_NAME).yosys-design
MODULE_PLACED = $(MODULE_NAME).mcpnr-placement
MODULE_ROUTED = $(MODULE_NAME).nbt
EXTRA_FILES += yosys.log

#
# Find where we are
#
mkfile_path := $(realpath $(lastword $(MAKEFILE_LIST)))
current_dir := $(dir $(mkfile_path))

#
# Common definitions for the MCPNR tools
#
MCPNR_WORKSPACE_ROOT ?= $(current_dir)/../pnr/
MCPNR_BUILD_FLAVOR ?= debug
MCPNR_TARGET_DIR ?= $(abspath $(MCPNR_WORKSPACE_ROOT)/target/$(MCPNR_BUILD_FLAVOR))

MCPNR_YOSYS_PLUGIN_DIR ?= $(abspath $(current_dir)/../yosys-synth_mc)
MCPNR_YOSYS_PLUGIN ?= $(MCPNR_YOSYS_PLUGIN_DIR)/synth_mc.so
MCPNR_LIBERTY_FILE ?= $(MCPNR_YOSYS_PLUGIN_DIR)/techlib/minecraft.lib
PLACEMENT_TOOL ?= $(MCPNR_TARGET_DIR)/mcpnr-placement

#
# Meta targets
#
all: $(MODULE_ROUTED)

.DEFAULT_GOAL := all

clean:
	rm -f $(MODULE_ROUTED) $(MODULE_TECHMAPPED) $(MODULE_PLACED) $(EXTRA_FILES)

.PHONY: all clean

#
# Actual build rules
#
QUIET_CMD = @printf "[ %15s ] %s\n" $1 $@ &&

define YOSYS_SCRIPT
read_verilog $(MODULE_NAME).v \n\
plugin -i $(MCPNR_YOSYS_PLUGIN) \n\
synth_mc -flatten -liberty $(MCPNR_LIBERTY_FILE) \n\
stat -liberty $(MCPNR_LIBERTY_FILE) \n\
write_protobuf $(MODULE_TECHMAPPED)
endef

$(MODULE_NAME).ys:
	$(call QUIET_CMD,WRITE_YOSYS) echo -e "${YOSYS_SCRIPT}" > $@

$(MODULE_TECHMAPPED) : $(MODULE_NAME).v $(MODULE_NAME).ys $(MCPNR_YOSYS_PLUGIN) $(MCPNR_LIBERTY_FILE)
	$(call QUIET_CMD,YOSYS) yosys -s $(MODULE_NAME).ys > yosys.log

$(MODULE_PLACED) : $(MODULE_TECHMAPPED) $(PLACEMENT_TOOL)
	$(call QUIET_CMD,PLACE) echo 'WARNING: actual module placment not implemented, just copying techmapped file' \
	&& cp $< $@

$(MODULE_ROUTED) : $(MODULE_PLACED)
	$(call QUIET_CMD,ROUTE) echo 'WARNING: actual module build not implemented, just copying placed file' \
	&& cp $< $@

#
# Build rules for tools
#
$(MCPNR_YOSYS_PLUGIN_DIR):

$(MCPNR_YOSYS_PLUGIN): $(MCPNR_YOSYS_PLUGIN_DIR)
	$(call QUIET_CMD,SUBMAKE) $(MAKE) -C $(MCPNR_YOSYS_PLUGIN_DIR)

.PHONY: $(MCPNR_YOSYS_PLUGIN_DIR)

# Include the depfiles generated by cargo so we know when to rebuild pnr tools
include $(wildcard $(MCPNR_TARGET_DIR)/*.d)

ifeq ($(MCPNR_BUILD_FLAVOR),release)
  CARGO_RELEASE_ARG=--release
else
  CARGO_RELEASE_ARG=
endif

$(PLACEMENT_TOOL):
	cd $(current_dir)/../pnr && cargo build $(CARGO_RELEASE_ARG) -p mcpnr-placement
